// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestaurantBookingApp.Data;

#nullable disable

namespace RestaurantBookingApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("RestaurantBookingApp.Shared.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeatsReserved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientEmail = "alicja.test@example.com",
                            ClientName = "Alicja Testowa",
                            ReservationDateTime = new DateTime(2025, 6, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 1,
                            SeatsReserved = 4,
                            Status = "Confirmed",
                            TableNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientEmail = "b.programista@example.com",
                            ClientName = "Bartosz Programista",
                            ReservationDateTime = new DateTime(2025, 6, 8, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 1,
                            SeatsReserved = 2,
                            Status = "Confirmed",
                            TableNumber = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientEmail = "celina.w@example.com",
                            ClientName = "Celina Wdrożenie",
                            ReservationDateTime = new DateTime(2025, 6, 8, 20, 30, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 2,
                            SeatsReserved = 2,
                            Status = "Confirmed",
                            TableNumber = 5
                        },
                        new
                        {
                            Id = 4,
                            ClientEmail = "d.debug@example.com",
                            ClientName = "Dawid Debug",
                            ReservationDateTime = new DateTime(2025, 6, 9, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 5,
                            SeatsReserved = 6,
                            Status = "Confirmed",
                            TableNumber = 10
                        },
                        new
                        {
                            Id = 5,
                            ClientEmail = "ewa.error@example.com",
                            ClientName = "Ewa Error",
                            ReservationDateTime = new DateTime(2025, 6, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 3,
                            SeatsReserved = 8,
                            Status = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            ClientEmail = "fabian.f@example.com",
                            ClientName = "Fabian Frontend",
                            ReservationDateTime = new DateTime(2025, 6, 10, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            RestaurantId = 4,
                            SeatsReserved = 2,
                            Status = "Confirmed",
                            TableNumber = 3
                        });
                });

            modelBuilder.Entity("RestaurantBookingApp.Shared.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("CuisineType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AveragePrice = 85.00m,
                            CuisineType = "Włoska",
                            Description = "Autentyczna włoska kuchnia w sercu Krakowa. Specjalizujemy się w pizzy neapolitańskiej i świeżych makaronach.",
                            IsClosed = false,
                            Location = "Kraków, Rynek Główny 10",
                            Name = "Trattoria da Vinci",
                            TotalSeats = 50
                        },
                        new
                        {
                            Id = 2,
                            AveragePrice = 120.00m,
                            CuisineType = "Japońska",
                            Description = "Nowoczesne sushi przygotowywane przez doświadczonych mistrzów. Świeże ryby dostarczane codziennie.",
                            IsClosed = false,
                            Location = "Warszawa, ul. Złota 59",
                            Name = "Sushi Master",
                            TotalSeats = 30
                        },
                        new
                        {
                            Id = 3,
                            AveragePrice = 60.00m,
                            CuisineType = "Polska",
                            Description = "Tradycyjne dania kuchni podhalańskiej w regionalnym wystroju. Spróbuj naszego oscypka z żurawiną!",
                            IsClosed = false,
                            Location = "Zakopane, Krupówki 25",
                            Name = "Góralska Chata",
                            TotalSeats = 80
                        },
                        new
                        {
                            Id = 4,
                            AveragePrice = 150.00m,
                            CuisineType = "Francuska",
                            Description = "Klimatyczne bistro z klasykami kuchni francuskiej. Idealne miejsce na romantyczną kolację.",
                            IsClosed = false,
                            Location = "Gdańsk, ul. Długa 15",
                            Name = "Le Petit Paris",
                            TotalSeats = 25
                        },
                        new
                        {
                            Id = 5,
                            AveragePrice = 75.00m,
                            CuisineType = "Meksykańska",
                            Description = "Fiesta smaków prosto z Meksyku. Prawdziwe tacos, burrito i orzeźwiająca margarita.",
                            IsClosed = false,
                            Location = "Wrocław, Plac Solny 5",
                            Name = "El Sombrero",
                            TotalSeats = 40
                        },
                        new
                        {
                            Id = 6,
                            AveragePrice = 180.00m,
                            CuisineType = "Amerykańska",
                            Description = "Najlepsze steki w mieście. Sezonowana wołowina, idealnie wysmażona według Twoich preferencji.",
                            IsClosed = true,
                            Location = "Poznań, Stary Rynek 100",
                            Name = "Steakhouse 'Angus'",
                            TotalSeats = 60
                        });
                });

            modelBuilder.Entity("RestaurantBookingApp.Shared.Models.Reservation", b =>
                {
                    b.HasOne("RestaurantBookingApp.Shared.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });
#pragma warning restore 612, 618
        }
    }
}
